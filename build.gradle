plugins {
	id 'java'
	id 'org.springframework.boot' version '3.5.0'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'jacoco'
	id 'checkstyle'
}

group = 'com.xeppelin'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	annotationProcessor 'org.projectlombok:lombok'
	
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'com.h2database:h2'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
	useJUnitPlatform()
	finalizedBy jacocoTestReport
}

jacoco {
	toolVersion = "0.8.12"
}

jacocoTestReport {
	dependsOn test
	executionData fileTree(dir: layout.buildDirectory.dir("jacoco"), include: "**/*.exec")
	
	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: [
				'**/OrderServiceApplication.class',
				'**/configuration/**',
				'**/config/**'
			])
		}))
	}
	
	reports {
		xml.required = true
		html.required = true
		csv.required = false
	}
	finalizedBy jacocoTestCoverageVerification
}

jacocoTestCoverageVerification {
	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: [
				'**/OrderServiceApplication.class',
				'**/configuration/**',
				'**/config/**'
			])
		}))
	}
	
	violationRules {
		rule {
			limit {
				minimum = 0.80  // Overall coverage
			}
		}
		rule {
			element = 'CLASS'
			excludes = [
				'com.xeppelin.orderservice.OrderServiceApplication',
				'com.xeppelin.orderservice.configuration.*',
				'com.xeppelin.orderservice.config.*'
			]
			limit {
				counter = 'LINE'
				value = 'COVEREDRATIO'
				minimum = 0.75  // Individual class coverage minimum
			}
		}
	}
}

checkstyle {
	toolVersion = '10.20.1'
	configFile = file('checkstyle.xml')
}

// Task for integration tests (if needed in the future)
task integrationTest(type: Test) {
	useJUnitPlatform()
	testClassesDirs = sourceSets.test.output.classesDirs
	classpath = sourceSets.test.runtimeClasspath
	
	include '**/*IT.*'
	include '**/*IntegrationTest.*'
	include '**/*Integration.*'
	
	shouldRunAfter test
	finalizedBy jacocoTestReport
	
	// Configure test logging
	testLogging {
		events "passed", "skipped", "failed"
		exceptionFormat "full"
	}
}
