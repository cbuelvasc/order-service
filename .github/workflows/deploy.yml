name: 'Modular CI/CD Pipeline'

on:
    push:
      branches:
        - master
        - develop
    pull_request:
      branches:
        - master
        - develop

env:
  JAVA_VERSION: '21'
  GRADLE_VERSION: '8.13'       
  JAVA_DISTRIBUTION: 'temurin'
  SPRING_PROFILES_ACTIVE: 'test'
  CACHE_KEY_SUFFIX: 'order-service-optimized'
  
permissions:
  contents: read
  checks: write
  pull-requests: write
  statuses: write

jobs:
  build-and-test:
    name: 'Build and Test'
    runs-on: ubuntu-latest
    outputs:
      cache-hit: ${{ steps.cache.outputs.cache-hit }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java Environment
        uses: cbuelvasc/actions/setup-java-base@master
        with:
          java-version: ${{ env.JAVA_VERSION }}
          java-distribution: ${{ env.JAVA_DISTRIBUTION }}
          spring-profiles: ${{ env.SPRING_PROFILES_ACTIVE }}

      - name: Setup Cache Only
        id: cache
        uses: cbuelvasc/actions/cache-manager@master
        with:
          build-tool: 'gradle'
          cache-strategy: 'all'
          cache-key-suffix: ${{ env.CACHE_KEY_SUFFIX }}

      - name: Validate Build Configuration
        run: |
          if [ -f gradlew ]; then
            ./gradlew clean check --dry-run
          fi

      - name: Run Service Tests
        uses: cbuelvasc/actions/test-runner@master
        with:
          build-tool: 'gradle'
          working-directory: '.'
          test-command: './gradlew clean test integrationTest'
          coverage-enabled: true
          coverage-threshold: '85'
          fail-on-coverage-threshold: true
          publish-test-results: true    

  docker-build:
    name: 'Build Docker Image'
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/develop'
    outputs:
      image-digest: ${{ steps.docker.outputs.image-digest }}
      image-full-name: ${{ steps.docker.outputs.image-full-name }}
      image-id: ${{ steps.docker.outputs.image-id }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java Environment
        uses: cbuelvasc/actions/setup-java-base@master
        with:
          java-version: ${{ env.JAVA_VERSION }}
          java-distribution: ${{ env.JAVA_DISTRIBUTION }}
          spring-profiles: 'prod'

      - name: Restore Cache
        uses: cbuelvasc/actions/cache-manager@master
        with:
          build-tool: 'gradle'
          cache-strategy: 'all'
          cache-key-suffix: ${{ env.CACHE_KEY_SUFFIX }}

      - name: Build Docker Image
        id: docker
        uses: cbuelvasc/actions/docker-build@master
        with:
          build-tool: 'gradle'
          image-name: 'cbuelvasc/order-service'
          image-tag: '${{ github.sha }}'
          java-version: ${{ env.JAVA_VERSION }}
          java-distribution: ${{ env.JAVA_DISTRIBUTION }}
          spring-profiles: 'prod'
          platforms: 'linux/amd64'
          push: ${{ github.event_name == 'push' && 'true' || 'false' }}
          registry-url: 'ghcr.io'
          registry-username: ${{ github.actor }}
          registry-password: ${{ secrets.GITHUB_TOKEN }}
          cache-strategy: 'all'
          dockerfile: 'Dockerfile'
          context: '.'
          build-args: |
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            VCS_REF=${{ github.sha }}
            VERSION=${{ github.ref_name }}

  deploy:
    name: 'Deploy Application'
    runs-on: ubuntu-latest
    needs: [build-and-test, docker-build]
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Production
        run: |
          echo "ðŸš€ Deploying application to production..."
          echo "ðŸ“¦ Docker Image: ${{ needs.docker-build.outputs.image-full-name }}"
          echo "ðŸ”— Image Digest: ${{ needs.docker-build.outputs.image-digest }}"
          echo "ðŸ†” Image ID: ${{ needs.docker-build.outputs.image-id }}"
          
          # Here you would add your actual deployment logic
          # For example: kubectl, docker-compose, or cloud provider deployments
          
          echo "âœ… Deployment completed successfully"

          