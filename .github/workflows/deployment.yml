name: Deployment Project

on:
    push:
      branches:
        - master
        - develop
    pull_request:
      branches:
        - master
        - develop

# Permisos necesarios para GitHub Actions
permissions:
  contents: read
  checks: write
  pull-requests: write
  statuses: write

env:
  JAVA_VERSION: '21'
  JAVA_DISTRIBUTION: 'temurin'
  GRADLE_VERSION: '8.13'        
  CACHE_KEY_SUFFIX: 'v1'

jobs:
  # Job 1: Build and Test
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4        
        
      - name: Run Spring Boot Test Suite
        id: test-suite
        uses: cbuelvasc/actions/spring-boot-test-suite@master
        with:
          java-version: ${{ env.JAVA_VERSION }}
          java-distribution: 'temurin'
          build-tool: 'gradle'
          coverage-enabled: 'true'
          coverage-threshold: '60'
          fail-on-coverage-threshold: 'false'
          spring-profiles: 'test'
          parallel-tests: 'true'
          integration-tests: 'true'
          gradle-args: '--no-daemon --parallel --build-cache'
          jvm-args: '-Xmx4g -XX:+UseG1GC -XX:MaxGCPauseMillis=200'
          cache-enabled: 'true'
          publish-test-results: 'false'
          
      - name: Build Application (without tests)
        run: ./gradlew build -x test --no-daemon
        env:
          GRADLE_OPTS: "-Dorg.gradle.caching=true -Dorg.gradle.parallel=true"
          
      - name: Display Test Results Summary
        run: |
          echo "üß™ Test Results Summary:"
          echo "‚úÖ Test execution result: ${{ steps.test-suite.outputs.test-result }}"
          echo "üìä Total tests executed: ${{ steps.test-suite.outputs.test-count }}"
          echo "‚ùå Failed tests: ${{ steps.test-suite.outputs.failed-test-count }}"
          echo "üìà Code coverage: ${{ steps.test-suite.outputs.coverage-percentage }}%"
          echo "üóÇÔ∏è Cache hit: ${{ steps.test-suite.outputs.cache-hit }}"
          echo "üîß Build tool version: ${{ steps.test-suite.outputs.build-tool-version }}"
          
      - name: Upload Test Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-reports
          path: |
            build/reports/tests/test/
            build/reports/jacoco/
          retention-days: 7

  docker-build:
      name: 'Build Docker Image'
      runs-on: ubuntu-latest
      needs: build-and-test
      if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/develop'
      permissions:
        contents: read
        packages: write
      outputs:
        image-digest: ${{ steps.docker.outputs.image-digest }}
        image-full-name: ${{ steps.docker.outputs.image-full-name }}
        image-id: ${{ steps.docker.outputs.image-id }}
      steps:
        - name: Checkout code
          uses: actions/checkout@v4

        - name: Setup Java Environment
          uses: cbuelvasc/actions/setup-java-base@master
          with:
            java-version: ${{ env.JAVA_VERSION }}
            java-distribution: ${{ env.JAVA_DISTRIBUTION }}
            spring-profiles: 'prod'

        - name: Restore Cache
          uses: cbuelvasc/actions/cache-manager@master
          with:
            build-tool: 'gradle'
            cache-strategy: 'all'
            cache-key-suffix: ${{ env.CACHE_KEY_SUFFIX }}

        - name: Build Docker Image
          id: docker
          uses: cbuelvasc/actions/docker-build@master
          with:
            build-tool: 'gradle'
            image-name: 'cbuelvasc/order-service'
            image-tag: '${{ github.sha }}'
            java-version: ${{ env.JAVA_VERSION }}
            java-distribution: ${{ env.JAVA_DISTRIBUTION }}
            spring-profiles: 'prod'
            platforms: 'linux/amd64'
            push: ${{ github.event_name == 'push' && 'true' || 'false' }}
            registry-url: 'ghcr.io'
            registry-username: ${{ github.actor }}
            registry-password: ${{ secrets.GITHUB_TOKEN }}
            cache-strategy: 'all'
            dockerfile: 'Dockerfile'
            context: '.'
            build-args: |
              BUILD_DATE=${{ github.event.head_commit.timestamp }}
              VCS_REF=${{ github.sha }}
              VERSION=${{ github.ref_name }}

  deploy:
    name: 'Deploy Application'
    runs-on: ubuntu-latest
    needs: [build-and-test, docker-build]
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Production
        run: |
          echo "üöÄ Deploying application to production..."
          echo "üì¶ Docker Image: ${{ needs.docker-build.outputs.image-full-name }}"
          echo "üîó Image Digest: ${{ needs.docker-build.outputs.image-digest }}"
          echo "üÜî Image ID: ${{ needs.docker-build.outputs.image-id }}"
          
          # Here you would add your actual deployment logic
          # For example: kubectl, docker-compose, or cloud provider deployments
          
          echo "‚úÖ Deployment completed successfully"

            